{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Prologue What's past is prologue. Purpose Prologue is a Medium Scale Web Framework which is ideal for building elegant and high performance web services. Feature Configure and Settings Context Params and Query Data Form Data Static Files Middlewares Simple Route Regex Route CORS Response Signing Cookie Session Cache Template(Using Karax Native or Using Nim Filter) Test Client(Using httpclient) Installation First you should install Nim language which is an elegant and high performance language.Follow the instructions and set environment variables correctly. Then you can use nimble command to install prologue. nimble install prologue Usage Hello World # app.nim import asyncdispatch import prologue proc hello * ( ctx : Context ) {. async .} = resp \"<h1>Hello, Prologue!</h1>\" let settings = newSettings () var app = initApp ( settings = settings ) app . addRoute ( \"/\" , hello ) app . run () Run app.nim .Now the server is running at localhost:8080. Another Example # app.nim import asyncdispatch import prologue # Async Function proc home * ( ctx : Context ) {. async .} = resp \"<h1>Home</h1>\" proc helloName * ( ctx : Context ) {. async .} = resp \"<h1>Hello, \" & getPathParams ( \"name\" , \"Prologue\" ) & \"</h1>\" proc login * ( ctx : Context ) {. async .} = resp loginPage () proc do_login * ( ctx : Context ) {. async .} = resp redirect ( \"/hello/Nim\" ) let settings = newSettings ( appName = \"StarLight\" ) var app = initApp ( settings = settings , middlewares = @[ debugRequestMiddleware ] ) app . addRoute ( \"/\" , home , @[ HttpGet , HttpPost ] ) app . addRoute ( \"/home\" , home , HttpGet ) app . addRoute ( \"/redirect\" , testRedirect , HttpGet ) app . addRoute ( \"/login\" , login , HttpGet ) app . addRoute ( \"/login\" , do_login , HttpPost , @[ debugRequestMiddleware ] ) app . addRoute ( \"/hello/{name}\" , helloName , HttpGet ) app . run () Run app.nim .Now the server is running at localhost:8080. Urls Files views.nim import asyncdispatch import prologue proc index * ( ctx : Context ) {. async .} = resp \"<h1>Hello, Prologue!</h1>\" proc hello * ( ctx : Context ) {. async .} = echo ctx . request . queryParams . getOrDefault ( \"name\" , \"\" ) resp \"<h1>Home</h1>\" urls.nim import prologue import views let urlPatterns * = @[ pattern ( \"/\" , index ), pattern ( \"/\" , index , HttpPost ), pattern ( \"/hello/{name}\" , hello ), ] app.nim import prologue import views , urls # read environment variables from file # Make sure \".env\" in your \".gitignore\" file. let env = loadPrologueEnv ( \".env\" ) let settings = newSettings ( appName = env . getOrDefault ( \"appName\" , \"Prologue\" ), debug = env . getOrDefault ( \"debug\" , true ), port = Port ( env . getOrDefault ( \"port\" , 8080 )), staticDir = env . get ( \"staticDir\" ), secretKey = SecretKey ( env . getOrDefault ( \"secretKey\" , \"\" )) ) var app = initApp ( settings = settings , middlewares = @[] ) app . addRoute ( urls . urlPatterns , \"/api\" ) app . addRoute ( \"/\" , index , HttpGet ) app . run () Run app.nim .Now the server is running at localhost:8080. More Examples HelloWorld ToDoList","title":"Introduction"},{"location":"#prologue","text":"What's past is prologue.","title":"Prologue"},{"location":"#purpose","text":"Prologue is a Medium Scale Web Framework which is ideal for building elegant and high performance web services.","title":"Purpose"},{"location":"#feature","text":"Configure and Settings Context Params and Query Data Form Data Static Files Middlewares Simple Route Regex Route CORS Response Signing Cookie Session Cache Template(Using Karax Native or Using Nim Filter) Test Client(Using httpclient)","title":"Feature"},{"location":"#installation","text":"First you should install Nim language which is an elegant and high performance language.Follow the instructions and set environment variables correctly. Then you can use nimble command to install prologue. nimble install prologue","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#hello-world","text":"# app.nim import asyncdispatch import prologue proc hello * ( ctx : Context ) {. async .} = resp \"<h1>Hello, Prologue!</h1>\" let settings = newSettings () var app = initApp ( settings = settings ) app . addRoute ( \"/\" , hello ) app . run () Run app.nim .Now the server is running at localhost:8080.","title":"Hello World"},{"location":"#another-example","text":"# app.nim import asyncdispatch import prologue # Async Function proc home * ( ctx : Context ) {. async .} = resp \"<h1>Home</h1>\" proc helloName * ( ctx : Context ) {. async .} = resp \"<h1>Hello, \" & getPathParams ( \"name\" , \"Prologue\" ) & \"</h1>\" proc login * ( ctx : Context ) {. async .} = resp loginPage () proc do_login * ( ctx : Context ) {. async .} = resp redirect ( \"/hello/Nim\" ) let settings = newSettings ( appName = \"StarLight\" ) var app = initApp ( settings = settings , middlewares = @[ debugRequestMiddleware ] ) app . addRoute ( \"/\" , home , @[ HttpGet , HttpPost ] ) app . addRoute ( \"/home\" , home , HttpGet ) app . addRoute ( \"/redirect\" , testRedirect , HttpGet ) app . addRoute ( \"/login\" , login , HttpGet ) app . addRoute ( \"/login\" , do_login , HttpPost , @[ debugRequestMiddleware ] ) app . addRoute ( \"/hello/{name}\" , helloName , HttpGet ) app . run () Run app.nim .Now the server is running at localhost:8080.","title":"Another Example"},{"location":"#urls-files","text":"views.nim import asyncdispatch import prologue proc index * ( ctx : Context ) {. async .} = resp \"<h1>Hello, Prologue!</h1>\" proc hello * ( ctx : Context ) {. async .} = echo ctx . request . queryParams . getOrDefault ( \"name\" , \"\" ) resp \"<h1>Home</h1>\" urls.nim import prologue import views let urlPatterns * = @[ pattern ( \"/\" , index ), pattern ( \"/\" , index , HttpPost ), pattern ( \"/hello/{name}\" , hello ), ] app.nim import prologue import views , urls # read environment variables from file # Make sure \".env\" in your \".gitignore\" file. let env = loadPrologueEnv ( \".env\" ) let settings = newSettings ( appName = env . getOrDefault ( \"appName\" , \"Prologue\" ), debug = env . getOrDefault ( \"debug\" , true ), port = Port ( env . getOrDefault ( \"port\" , 8080 )), staticDir = env . get ( \"staticDir\" ), secretKey = SecretKey ( env . getOrDefault ( \"secretKey\" , \"\" )) ) var app = initApp ( settings = settings , middlewares = @[] ) app . addRoute ( urls . urlPatterns , \"/api\" ) app . addRoute ( \"/\" , index , HttpGet ) app . run () Run app.nim .Now the server is running at localhost:8080.","title":"Urls Files"},{"location":"#more-examples","text":"HelloWorld ToDoList","title":"More Examples"},{"location":"application/","text":"application","title":"Application"},{"location":"application/#application","text":"","title":"application"},{"location":"quickstart/","text":"Now Let's begin a quick tour of Prologue . # app.nim import asyncdispatch import prologue proc hello * ( ctx : Context ) {. async .} = resp \"<h1>Hello, Prologue!</h1>\" let settings = newSettings () var app = initApp ( settings = settings ) app . addRoute ( \"/\" , hello ) app . run () This is a very basic \"Hello Prologue\" example.Run this script, visit http://localhost:8080 and you will see \"Hello, Prologue!\" in your browser! Here is how it works.","title":"Quickstart"},{"location":"route/","text":"Route","title":"Route"},{"location":"route/#route","text":"","title":"Route"}]}