{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Prologue What's past is prologue. Purpose Prologue is a Full-Stack Web Framework which is ideal for building elegant and high performance web services. Feature Base on httpbeast and asynchttpserver Configure and Settings Context Param and Query Data Form Data Static Files Middleware Startup and Shutdown Events Simple Route Regex Route CORS Response Cross-Site Request Forgery Cross-Site Scripting (XSS) Protection(Karax quote string automatically) Exception Handler Signing Cookie Session Cache URL Building Template(Using Karax Native or Using Nim Filter) Test Client(Using httpclient) Installation First you should install Nim language which is an elegant and high performance language.Follow the instructions and set environment variables correctly. Then you can use nimble command to install prologue. nimble install prologue@#head Usage Hello World # app.nim import prologue proc hello * ( ctx : Context ) {. async .} = resp \"<h1>Hello, Prologue!</h1>\" let settings = newSettings () var app = newApp ( settings = settings ) app . addRoute ( \"/\" , hello ) app . run () Run app.nim .Now the server is running at localhost:8080. Another Example # app.nim import prologue # Async Function proc home * ( ctx : Context ) {. async .} = resp \"<h1>Home</h1>\" proc helloName * ( ctx : Context ) {. async .} = resp \"<h1>Hello, \" & getPathParams ( \"name\" , \"Prologue\" ) & \"</h1>\" proc login * ( ctx : Context ) {. async .} = resp loginPage () proc do_login * ( ctx : Context ) {. async .} = resp redirect ( \"/hello/Nim\" ) let settings = newSettings ( appName = \"StarLight\" ) var app = newApp ( settings = settings , middlewares = @[ debugRequestMiddleware ] ) app . addRoute ( \"/\" , home , @[ HttpGet , HttpPost ] ) app . addRoute ( \"/home\" , home , HttpGet ) app . addRoute ( \"/redirect\" , testRedirect , HttpGet ) app . addRoute ( \"/login\" , login , HttpGet ) app . addRoute ( \"/login\" , do_login , HttpPost , @[ debugRequestMiddleware ] ) app . addRoute ( \"/hello/{name}\" , helloName , HttpGet ) app . run () Run app.nim .Now the server is running at localhost:8080. URLs Files views.nim import prologue proc index * ( ctx : Context ) {. async .} = resp \"<h1>Hello, Prologue!</h1>\" proc hello * ( ctx : Context ) {. async .} = echo ctx . request . queryParams . getOrDefault ( \"name\" , \"\" ) resp \"<h1>Home</h1>\" URLs.nim import prologue import views let urlPatterns * = @[ pattern ( \"/\" , index ), pattern ( \"/\" , index , HttpPost ), pattern ( \"/hello/{name}\" , hello ), ] app.nim import prologue import views , urls # read environment variables from file # Make sure \".env\" in your \".gitignore\" file. let env = loadPrologueEnv ( \".env\" ) settings = newSettings ( appName = env . getOrDefault ( \"appName\" , \"Prologue\" ), debug = env . getOrDefault ( \"debug\" , true ), port = Port ( env . getOrDefault ( \"port\" , 8080 )), staticDir = env . get ( \"staticDir\" ), secretKey = SecretKey ( env . getOrDefault ( \"secretKey\" , \"\" )) ) var app = newApp ( settings = settings , middlewares = @[] ) app . addRoute ( urls . urlPatterns , \"/api\" ) app . addRoute ( \"/\" , index , HttpGet ) app . run () Run app.nim .Now the server is running at localhost:8080. More Examples HelloWorld ToDoList Blog","title":"Introduction"},{"location":"#prologue","text":"What's past is prologue.","title":"Prologue"},{"location":"#purpose","text":"Prologue is a Full-Stack Web Framework which is ideal for building elegant and high performance web services.","title":"Purpose"},{"location":"#feature","text":"Base on httpbeast and asynchttpserver Configure and Settings Context Param and Query Data Form Data Static Files Middleware Startup and Shutdown Events Simple Route Regex Route CORS Response Cross-Site Request Forgery Cross-Site Scripting (XSS) Protection(Karax quote string automatically) Exception Handler Signing Cookie Session Cache URL Building Template(Using Karax Native or Using Nim Filter) Test Client(Using httpclient)","title":"Feature"},{"location":"#installation","text":"First you should install Nim language which is an elegant and high performance language.Follow the instructions and set environment variables correctly. Then you can use nimble command to install prologue. nimble install prologue@#head","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#hello-world","text":"# app.nim import prologue proc hello * ( ctx : Context ) {. async .} = resp \"<h1>Hello, Prologue!</h1>\" let settings = newSettings () var app = newApp ( settings = settings ) app . addRoute ( \"/\" , hello ) app . run () Run app.nim .Now the server is running at localhost:8080.","title":"Hello World"},{"location":"#another-example","text":"# app.nim import prologue # Async Function proc home * ( ctx : Context ) {. async .} = resp \"<h1>Home</h1>\" proc helloName * ( ctx : Context ) {. async .} = resp \"<h1>Hello, \" & getPathParams ( \"name\" , \"Prologue\" ) & \"</h1>\" proc login * ( ctx : Context ) {. async .} = resp loginPage () proc do_login * ( ctx : Context ) {. async .} = resp redirect ( \"/hello/Nim\" ) let settings = newSettings ( appName = \"StarLight\" ) var app = newApp ( settings = settings , middlewares = @[ debugRequestMiddleware ] ) app . addRoute ( \"/\" , home , @[ HttpGet , HttpPost ] ) app . addRoute ( \"/home\" , home , HttpGet ) app . addRoute ( \"/redirect\" , testRedirect , HttpGet ) app . addRoute ( \"/login\" , login , HttpGet ) app . addRoute ( \"/login\" , do_login , HttpPost , @[ debugRequestMiddleware ] ) app . addRoute ( \"/hello/{name}\" , helloName , HttpGet ) app . run () Run app.nim .Now the server is running at localhost:8080.","title":"Another Example"},{"location":"#urls-files","text":"views.nim import prologue proc index * ( ctx : Context ) {. async .} = resp \"<h1>Hello, Prologue!</h1>\" proc hello * ( ctx : Context ) {. async .} = echo ctx . request . queryParams . getOrDefault ( \"name\" , \"\" ) resp \"<h1>Home</h1>\" URLs.nim import prologue import views let urlPatterns * = @[ pattern ( \"/\" , index ), pattern ( \"/\" , index , HttpPost ), pattern ( \"/hello/{name}\" , hello ), ] app.nim import prologue import views , urls # read environment variables from file # Make sure \".env\" in your \".gitignore\" file. let env = loadPrologueEnv ( \".env\" ) settings = newSettings ( appName = env . getOrDefault ( \"appName\" , \"Prologue\" ), debug = env . getOrDefault ( \"debug\" , true ), port = Port ( env . getOrDefault ( \"port\" , 8080 )), staticDir = env . get ( \"staticDir\" ), secretKey = SecretKey ( env . getOrDefault ( \"secretKey\" , \"\" )) ) var app = newApp ( settings = settings , middlewares = @[] ) app . addRoute ( urls . urlPatterns , \"/api\" ) app . addRoute ( \"/\" , index , HttpGet ) app . run () Run app.nim .Now the server is running at localhost:8080.","title":"URLs Files"},{"location":"#more-examples","text":"HelloWorld ToDoList Blog","title":"More Examples"},{"location":"application/","text":"application","title":"Application"},{"location":"application/#application","text":"","title":"application"},{"location":"middleware/","text":"","title":"Middleware"},{"location":"quickstart/","text":"Now Let's begin a quick tour of Prologue . # app.nim import prologue proc hello * ( ctx : Context ) {. async .} = resp \"<h1>Hello, Prologue!</h1>\" let settings = newSettings () var app = newApp ( settings = settings ) app . addRoute ( \"/\" , hello ) app . run () This is a very basic \"Hello Prologue\" example.Run this script, visit http://localhost:8080 and you will see \"Hello, Prologue!\" in your browser! Here is how it works. First we import prologue to include all things we need in this example. Then let's look at hello function. It generates html or plain text or json or something else to our default http server(asynchttpserver). Function parameters ctx is of Context type. Context carry all things in every request. It includes request from http server and response which we transfer to http server Correspondingly and other useful attributes. In function body, we can find resp . resp is handy for generating response we need. It is equal to ctx.response = initResponse(\"<h1>Hello, Prologue!</h1>\") . Next let's configure our application.For this basic example, we will use default settings.You can specify parameters of newSettings of course.You can change to other port or set debug flag. Next let's add route to our application.Finally just run our application.","title":"QuickStart"},{"location":"requests/","text":"","title":"Requests"},{"location":"response/","text":"","title":"Response"},{"location":"route/","text":"Route","title":"Route"},{"location":"route/#route","text":"","title":"Route"},{"location":"staticfiles/","text":"","title":"Static Files"}]}